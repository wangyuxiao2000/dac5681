#*****************************************************************************************
# Vivado (TM) v2022.1 (64-bit)
#
# project_zu.tcl: Tcl script for re-creating project 'project'
#
# Generated by Vivado on Thu Dec 05 11:09:05 +0800 2024
# IP Build 3524634 on Mon Apr 18 20:55:01 MDT 2022
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (project_zu.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/sources/zu/clk_gen.v"]"\
 "[file normalize "$origin_dir/sources/zu/delay_ctrl.v"]"\
 "[file normalize "$origin_dir/sources/zu/lvds_out.v"]"\
 "[file normalize "$origin_dir/sources/zu/sync_ctrl.v"]"\
 "[file normalize "$origin_dir/sources/zu/pin.xdc"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set paths [list \
 "[file normalize "$origin_dir/[file normalize "$origin_dir/my_ip/zu"]"]"\
  ]
  foreach ipath $paths {
    if { ![file isdirectory $ipath] } {
      puts " Could not access $ipath "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "project"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "project_zu.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/project"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xczu19eg-ffvc1760-2-i

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xczu19eg-ffvc1760-2-i" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "10" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "10" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "10" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "10" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "10" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "10" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "11" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
if { $obj != {} } {
   set_property "ip_repo_paths" "[file normalize "$origin_dir/my_ip/zu"]" $obj

   # Rebuild user ip_repo's index before adding any source files
   update_ip_catalog -rebuild
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/sources/zu/clk_gen.v" ]\
 [file normalize "${origin_dir}/sources/zu/delay_ctrl.v" ]\
 [file normalize "${origin_dir}/sources/zu/lvds_out.v" ]\
 [file normalize "${origin_dir}/sources/zu/sync_ctrl.v" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "design_1_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/sources/zu/pin.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "pin.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xczu19eg-ffvc1760-2-i" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "design_1_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added


# Proc to create BD design_1
proc cr_bd_design_1 { parentCell } {

  # CHANGE DESIGN NAME HERE
  set design_name design_1

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_gpio:2.0\
  xilinx.com:ip:proc_sys_reset:5.0\
  xilinx.com:ip:xlconstant:1.1\
  xilinx.com:ip:zynq_ultra_ps_e:3.4\
  xilinx.com:user:spi:1.0\
  xilinx.com:user:spi_regs:1.0\
  xilinx.com:ip:xlslice:1.0\
  xilinx.com:ip:clk_wiz:6.0\
  xilinx.com:user:dds_parallel:1.0\
  xilinx.com:user:mux2_1:1.0\
  xilinx.com:ip:xlconcat:2.1\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  lvds_out\
  clk_gen\
  delay_ctrl\
  sync_ctrl\
  delay_ctrl\
  sync_ctrl\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: ctrl_dac2
proc create_hier_cell_ctrl_dac2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_ctrl_dac2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI3

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI4


  # Create pins
  create_bd_pin -dir O -from 0 -to 0 data_en
  create_bd_pin -dir O -from 0 -to 0 dclk_en
  create_bd_pin -dir O -from 127 -to 0 dds_data
  create_bd_pin -dir O -from 8 -to 0 delay
  create_bd_pin -dir O delay_load
  create_bd_pin -dir I -from 8 -to 0 delay_monitor
  create_bd_pin -dir I delay_rd
  create_bd_pin -dir O delay_vtc
  create_bd_pin -dir I -type clk f125m_clk
  create_bd_pin -dir I locked
  create_bd_pin -dir O -from 7 -to 0 sync_data
  create_bd_pin -dir O sync_en

  # Create instance: dds_parallel_0, and set properties
  set dds_parallel_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:dds_parallel:1.0 dds_parallel_0 ]

  # Create instance: delay_ctrl_0, and set properties
  set block_name delay_ctrl
  set block_cell_name delay_ctrl_0
  if { [catch {set delay_ctrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $delay_ctrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: gpio_data, and set properties
  set gpio_data [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_data ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_ALL_OUTPUTS_2 {1} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {16} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_data

  # Create instance: gpio_dds_freq, and set properties
  set gpio_dds_freq [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_dds_freq ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS_2 {1} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_DOUT_DEFAULT {0x0000051F} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {16} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_dds_freq

  # Create instance: gpio_delay, and set properties
  set gpio_delay [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_delay ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS_2 {1} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO2_WIDTH {10} \
   CONFIG.C_GPIO_WIDTH {9} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_delay

  # Create instance: gpio_en, and set properties
  set gpio_en [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_en ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_ALL_OUTPUTS_2 {1} \
   CONFIG.C_DOUT_DEFAULT {0x00000001} \
   CONFIG.C_DOUT_DEFAULT_2 {0x00000001} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_en

  # Create instance: gpio_sync, and set properties
  set gpio_sync [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_sync ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS_2 {1} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_ALL_OUTPUTS_2 {0} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {2} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_sync

  # Create instance: high, and set properties
  set high [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 high ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $high

  # Create instance: low, and set properties
  set low [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 low ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {0} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $low

  # Create instance: mux2_1_0, and set properties
  set mux2_1_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:mux2_1:1.0 mux2_1_0 ]
  set_property -dict [ list \
   CONFIG.mode {0} \
   CONFIG.width {128} \
 ] $mux2_1_0

  # Create instance: sync_ctrl_0, and set properties
  set block_name sync_ctrl
  set block_cell_name sync_ctrl_0
  if { [catch {set sync_ctrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sync_ctrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: vcc, and set properties
  set vcc [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 vcc ]

  # Create instance: xlconcat_0, and set properties
  set xlconcat_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 xlconcat_0 ]
  set_property -dict [ list \
   CONFIG.IN0_WIDTH {1} \
   CONFIG.IN1_WIDTH {9} \
 ] $xlconcat_0

  # Create instance: xlconcat_1, and set properties
  set xlconcat_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 xlconcat_1 ]
  set_property -dict [ list \
   CONFIG.IN0_WIDTH {16} \
   CONFIG.IN1_WIDTH {16} \
   CONFIG.IN2_WIDTH {16} \
   CONFIG.IN3_WIDTH {16} \
   CONFIG.IN4_WIDTH {16} \
   CONFIG.IN5_WIDTH {16} \
   CONFIG.IN6_WIDTH {16} \
   CONFIG.IN7_WIDTH {16} \
   CONFIG.NUM_PORTS {8} \
 ] $xlconcat_1

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI3] [get_bd_intf_pins gpio_sync/S_AXI]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins S_AXI1] [get_bd_intf_pins gpio_delay/S_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins S_AXI4] [get_bd_intf_pins gpio_en/S_AXI]
  connect_bd_intf_net -intf_net Conn6 [get_bd_intf_pins S_AXI2] [get_bd_intf_pins gpio_data/S_AXI]
  connect_bd_intf_net -intf_net Conn8 [get_bd_intf_pins S_AXI] [get_bd_intf_pins gpio_dds_freq/S_AXI]
  connect_bd_intf_net -intf_net dds_parallel_0_m_axis [get_bd_intf_pins dds_parallel_0/m_axis] [get_bd_intf_pins mux2_1_0/s0_axis]

  # Create port connections
  connect_bd_net -net axi_gpio_0_gpio2_io_o [get_bd_pins gpio_data/gpio2_io_o] [get_bd_pins mux2_1_0/sel]
  connect_bd_net -net axi_gpio_0_gpio_io_o [get_bd_pins gpio_data/gpio_io_o] [get_bd_pins xlconcat_1/In0] [get_bd_pins xlconcat_1/In1] [get_bd_pins xlconcat_1/In2] [get_bd_pins xlconcat_1/In3] [get_bd_pins xlconcat_1/In4] [get_bd_pins xlconcat_1/In5] [get_bd_pins xlconcat_1/In6] [get_bd_pins xlconcat_1/In7]
  connect_bd_net -net axi_gpio_delay_gpio_io_o [get_bd_pins delay_ctrl_0/delay_value] [get_bd_pins gpio_delay/gpio_io_o]
  connect_bd_net -net clk_gen_0_f125m_clk [get_bd_pins f125m_clk] [get_bd_pins dds_parallel_0/clk] [get_bd_pins delay_ctrl_0/clk_125m] [get_bd_pins gpio_data/s_axi_aclk] [get_bd_pins gpio_dds_freq/s_axi_aclk] [get_bd_pins gpio_delay/s_axi_aclk] [get_bd_pins gpio_en/s_axi_aclk] [get_bd_pins gpio_sync/s_axi_aclk] [get_bd_pins mux2_1_0/clk] [get_bd_pins sync_ctrl_0/clk_125m]
  connect_bd_net -net clk_wiz_0_locked1 [get_bd_pins locked] [get_bd_pins dds_parallel_0/rst_n] [get_bd_pins delay_ctrl_0/rst_n] [get_bd_pins gpio_data/s_axi_aresetn] [get_bd_pins gpio_dds_freq/s_axi_aresetn] [get_bd_pins gpio_delay/s_axi_aresetn] [get_bd_pins gpio_en/s_axi_aresetn] [get_bd_pins gpio_sync/s_axi_aresetn] [get_bd_pins mux2_1_0/rst_n] [get_bd_pins sync_ctrl_0/rst_n]
  connect_bd_net -net ctrl_dac1_data_en [get_bd_pins data_en] [get_bd_pins gpio_en/gpio2_io_o]
  connect_bd_net -net ctrl_dac1_dclk_en [get_bd_pins dclk_en] [get_bd_pins gpio_en/gpio_io_o]
  connect_bd_net -net ctrl_dac1_dds_data [get_bd_pins dds_data] [get_bd_pins mux2_1_0/m_axis_tdata]
  connect_bd_net -net ctrl_dac1_delay [get_bd_pins delay] [get_bd_pins delay_ctrl_0/delay]
  connect_bd_net -net ctrl_dac1_delay_load [get_bd_pins delay_load] [get_bd_pins delay_ctrl_0/delay_load]
  connect_bd_net -net ctrl_dac1_delay_vtc [get_bd_pins delay_vtc] [get_bd_pins delay_ctrl_0/delay_vtc]
  connect_bd_net -net ctrl_dac1_sync_data [get_bd_pins sync_data] [get_bd_pins sync_ctrl_0/sync_data]
  connect_bd_net -net ctrl_dac1_sync_en [get_bd_pins sync_en] [get_bd_pins sync_ctrl_0/sync_en]
  connect_bd_net -net dds_parallel_0_pinc_axis_tready [get_bd_pins dds_parallel_0/pinc_axis_tready] [get_bd_pins gpio_dds_freq/gpio2_io_i]
  connect_bd_net -net delay_ctrl_0_ready [get_bd_pins delay_ctrl_0/ready] [get_bd_pins xlconcat_0/In0]
  connect_bd_net -net gpio_dds_freq_gpio_io_o [get_bd_pins dds_parallel_0/pinc_axis_tdata] [get_bd_pins gpio_dds_freq/gpio_io_o]
  connect_bd_net -net gpio_sync_gpio_io_o [get_bd_pins gpio_sync/gpio_io_o] [get_bd_pins high/Din] [get_bd_pins low/Din]
  connect_bd_net -net high_Dout [get_bd_pins high/Dout] [get_bd_pins sync_ctrl_0/mode]
  connect_bd_net -net low_Dout [get_bd_pins low/Dout] [get_bd_pins sync_ctrl_0/sync]
  connect_bd_net -net lvds_out_0_dac1_dclk_n [get_bd_pins delay_monitor] [get_bd_pins delay_ctrl_0/delay_monitor] [get_bd_pins xlconcat_0/In1]
  connect_bd_net -net lvds_out_0_delay_rd [get_bd_pins delay_rd] [get_bd_pins delay_ctrl_0/delay_rd]
  connect_bd_net -net sync_ctrl_0_sync_rd [get_bd_pins gpio_sync/gpio2_io_i] [get_bd_pins sync_ctrl_0/sync_rd]
  connect_bd_net -net vcc_dout [get_bd_pins mux2_1_0/m_axis_tready] [get_bd_pins mux2_1_0/s1_axis_tvalid] [get_bd_pins vcc/dout]
  connect_bd_net -net xlconcat_0_dout [get_bd_pins gpio_delay/gpio2_io_i] [get_bd_pins xlconcat_0/dout]
  connect_bd_net -net xlconcat_1_dout [get_bd_pins mux2_1_0/s1_axis_tdata] [get_bd_pins xlconcat_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: ctrl_dac1
proc create_hier_cell_ctrl_dac1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_ctrl_dac1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI3

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI4


  # Create pins
  create_bd_pin -dir O -from 0 -to 0 data_en
  create_bd_pin -dir O -from 0 -to 0 dclk_en
  create_bd_pin -dir O -from 127 -to 0 dds_data
  create_bd_pin -dir O -from 8 -to 0 delay
  create_bd_pin -dir O delay_load
  create_bd_pin -dir I -from 8 -to 0 delay_monitor
  create_bd_pin -dir I delay_rd
  create_bd_pin -dir O delay_vtc
  create_bd_pin -dir I -type clk f125m_clk
  create_bd_pin -dir I locked
  create_bd_pin -dir O -from 7 -to 0 sync_data
  create_bd_pin -dir O sync_en

  # Create instance: dds_parallel_0, and set properties
  set dds_parallel_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:dds_parallel:1.0 dds_parallel_0 ]

  # Create instance: delay_ctrl_0, and set properties
  set block_name delay_ctrl
  set block_cell_name delay_ctrl_0
  if { [catch {set delay_ctrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $delay_ctrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: gpio_data, and set properties
  set gpio_data [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_data ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_ALL_OUTPUTS_2 {1} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {16} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_data

  # Create instance: gpio_dds_freq, and set properties
  set gpio_dds_freq [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_dds_freq ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS_2 {1} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_DOUT_DEFAULT {0x0000051F} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {16} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_dds_freq

  # Create instance: gpio_delay, and set properties
  set gpio_delay [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_delay ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS_2 {1} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO2_WIDTH {10} \
   CONFIG.C_GPIO_WIDTH {9} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_delay

  # Create instance: gpio_en, and set properties
  set gpio_en [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_en ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_ALL_OUTPUTS_2 {1} \
   CONFIG.C_DOUT_DEFAULT {0x00000001} \
   CONFIG.C_DOUT_DEFAULT_2 {0x00000001} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_en

  # Create instance: gpio_sync, and set properties
  set gpio_sync [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_sync ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS_2 {1} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_ALL_OUTPUTS_2 {0} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {2} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_sync

  # Create instance: high, and set properties
  set high [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 high ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $high

  # Create instance: low, and set properties
  set low [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 low ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {0} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $low

  # Create instance: mux2_1_0, and set properties
  set mux2_1_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:mux2_1:1.0 mux2_1_0 ]
  set_property -dict [ list \
   CONFIG.mode {0} \
   CONFIG.width {128} \
 ] $mux2_1_0

  # Create instance: sync_ctrl_0, and set properties
  set block_name sync_ctrl
  set block_cell_name sync_ctrl_0
  if { [catch {set sync_ctrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sync_ctrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: vcc, and set properties
  set vcc [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 vcc ]

  # Create instance: xlconcat_0, and set properties
  set xlconcat_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 xlconcat_0 ]
  set_property -dict [ list \
   CONFIG.IN0_WIDTH {1} \
   CONFIG.IN1_WIDTH {9} \
 ] $xlconcat_0

  # Create instance: xlconcat_1, and set properties
  set xlconcat_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 xlconcat_1 ]
  set_property -dict [ list \
   CONFIG.IN0_WIDTH {16} \
   CONFIG.IN1_WIDTH {16} \
   CONFIG.IN2_WIDTH {16} \
   CONFIG.IN3_WIDTH {16} \
   CONFIG.IN4_WIDTH {16} \
   CONFIG.IN5_WIDTH {16} \
   CONFIG.IN6_WIDTH {16} \
   CONFIG.IN7_WIDTH {16} \
   CONFIG.NUM_PORTS {8} \
 ] $xlconcat_1

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI3] [get_bd_intf_pins gpio_sync/S_AXI]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins S_AXI1] [get_bd_intf_pins gpio_delay/S_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins S_AXI4] [get_bd_intf_pins gpio_en/S_AXI]
  connect_bd_intf_net -intf_net Conn6 [get_bd_intf_pins S_AXI2] [get_bd_intf_pins gpio_data/S_AXI]
  connect_bd_intf_net -intf_net Conn8 [get_bd_intf_pins S_AXI] [get_bd_intf_pins gpio_dds_freq/S_AXI]
  connect_bd_intf_net -intf_net dds_parallel_0_m_axis [get_bd_intf_pins dds_parallel_0/m_axis] [get_bd_intf_pins mux2_1_0/s0_axis]

  # Create port connections
  connect_bd_net -net axi_gpio_0_gpio2_io_o [get_bd_pins gpio_data/gpio2_io_o] [get_bd_pins mux2_1_0/sel]
  connect_bd_net -net axi_gpio_0_gpio_io_o [get_bd_pins gpio_data/gpio_io_o] [get_bd_pins xlconcat_1/In0] [get_bd_pins xlconcat_1/In1] [get_bd_pins xlconcat_1/In2] [get_bd_pins xlconcat_1/In3] [get_bd_pins xlconcat_1/In4] [get_bd_pins xlconcat_1/In5] [get_bd_pins xlconcat_1/In6] [get_bd_pins xlconcat_1/In7]
  connect_bd_net -net axi_gpio_delay_gpio_io_o [get_bd_pins delay_ctrl_0/delay_value] [get_bd_pins gpio_delay/gpio_io_o]
  connect_bd_net -net clk_gen_0_f125m_clk [get_bd_pins f125m_clk] [get_bd_pins dds_parallel_0/clk] [get_bd_pins delay_ctrl_0/clk_125m] [get_bd_pins gpio_data/s_axi_aclk] [get_bd_pins gpio_dds_freq/s_axi_aclk] [get_bd_pins gpio_delay/s_axi_aclk] [get_bd_pins gpio_en/s_axi_aclk] [get_bd_pins gpio_sync/s_axi_aclk] [get_bd_pins mux2_1_0/clk] [get_bd_pins sync_ctrl_0/clk_125m]
  connect_bd_net -net clk_wiz_0_locked1 [get_bd_pins locked] [get_bd_pins dds_parallel_0/rst_n] [get_bd_pins delay_ctrl_0/rst_n] [get_bd_pins gpio_data/s_axi_aresetn] [get_bd_pins gpio_dds_freq/s_axi_aresetn] [get_bd_pins gpio_delay/s_axi_aresetn] [get_bd_pins gpio_en/s_axi_aresetn] [get_bd_pins gpio_sync/s_axi_aresetn] [get_bd_pins mux2_1_0/rst_n] [get_bd_pins sync_ctrl_0/rst_n]
  connect_bd_net -net ctrl_dac1_data_en [get_bd_pins data_en] [get_bd_pins gpio_en/gpio2_io_o]
  connect_bd_net -net ctrl_dac1_dclk_en [get_bd_pins dclk_en] [get_bd_pins gpio_en/gpio_io_o]
  connect_bd_net -net ctrl_dac1_dds_data [get_bd_pins dds_data] [get_bd_pins mux2_1_0/m_axis_tdata]
  connect_bd_net -net ctrl_dac1_delay [get_bd_pins delay] [get_bd_pins delay_ctrl_0/delay]
  connect_bd_net -net ctrl_dac1_delay_load [get_bd_pins delay_load] [get_bd_pins delay_ctrl_0/delay_load]
  connect_bd_net -net ctrl_dac1_delay_vtc [get_bd_pins delay_vtc] [get_bd_pins delay_ctrl_0/delay_vtc]
  connect_bd_net -net ctrl_dac1_sync_data [get_bd_pins sync_data] [get_bd_pins sync_ctrl_0/sync_data]
  connect_bd_net -net ctrl_dac1_sync_en [get_bd_pins sync_en] [get_bd_pins sync_ctrl_0/sync_en]
  connect_bd_net -net dds_parallel_0_pinc_axis_tready [get_bd_pins dds_parallel_0/pinc_axis_tready] [get_bd_pins gpio_dds_freq/gpio2_io_i]
  connect_bd_net -net delay_ctrl_0_ready [get_bd_pins delay_ctrl_0/ready] [get_bd_pins xlconcat_0/In0]
  connect_bd_net -net gpio_dds_freq_gpio_io_o [get_bd_pins dds_parallel_0/pinc_axis_tdata] [get_bd_pins gpio_dds_freq/gpio_io_o]
  connect_bd_net -net gpio_sync_gpio_io_o [get_bd_pins gpio_sync/gpio_io_o] [get_bd_pins high/Din] [get_bd_pins low/Din]
  connect_bd_net -net high_Dout [get_bd_pins high/Dout] [get_bd_pins sync_ctrl_0/mode]
  connect_bd_net -net low_Dout [get_bd_pins low/Dout] [get_bd_pins sync_ctrl_0/sync]
  connect_bd_net -net lvds_out_0_dac1_dclk_n [get_bd_pins delay_monitor] [get_bd_pins delay_ctrl_0/delay_monitor] [get_bd_pins xlconcat_0/In1]
  connect_bd_net -net lvds_out_0_delay_rd [get_bd_pins delay_rd] [get_bd_pins delay_ctrl_0/delay_rd]
  connect_bd_net -net sync_ctrl_0_sync_rd [get_bd_pins gpio_sync/gpio2_io_i] [get_bd_pins sync_ctrl_0/sync_rd]
  connect_bd_net -net vcc_dout [get_bd_pins mux2_1_0/m_axis_tready] [get_bd_pins mux2_1_0/s1_axis_tvalid] [get_bd_pins vcc/dout]
  connect_bd_net -net xlconcat_0_dout [get_bd_pins gpio_delay/gpio2_io_i] [get_bd_pins xlconcat_0/dout]
  connect_bd_net -net xlconcat_1_dout [get_bd_pins mux2_1_0/s1_axis_tdata] [get_bd_pins xlconcat_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: clk
proc create_hier_cell_clk { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_clk() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk_250m_n
  create_bd_pin -dir I -type clk clk_250m_p
  create_bd_pin -dir O -type clk f125m_clk
  create_bd_pin -dir O -type clk f500m_clk
  create_bd_pin -dir O locked

  # Create instance: clk_gen_0, and set properties
  set block_name clk_gen
  set block_cell_name clk_gen_0
  if { [catch {set clk_gen_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $clk_gen_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  set_property -dict [ list \
   CONFIG.FREQ_HZ {125000000} \
 ] [get_bd_pins /dac5681/clk/clk_gen_0/f125m_clk]

  set_property -dict [ list \
   CONFIG.FREQ_HZ {500000000} \
 ] [get_bd_pins /dac5681/clk/clk_gen_0/f500m_clk]

  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {40.0} \
   CONFIG.CLKOUT1_DRIVES {No_buffer} \
   CONFIG.CLKOUT1_JITTER {74.376} \
   CONFIG.CLKOUT1_PHASE_ERROR {78.266} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {500.000} \
   CONFIG.CLKOUT2_JITTER {162.035} \
   CONFIG.CLKOUT2_PHASE_ERROR {164.985} \
   CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {100.000} \
   CONFIG.CLKOUT2_USED {false} \
   CONFIG.CLKOUT3_JITTER {162.035} \
   CONFIG.CLKOUT3_PHASE_ERROR {164.985} \
   CONFIG.CLKOUT3_USED {false} \
   CONFIG.CLK_OUT1_PORT {clk_500m} \
   CONFIG.FEEDBACK_SOURCE {FDBK_ONCHIP} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {4.750} \
   CONFIG.MMCM_CLKIN1_PERIOD {4.000} \
   CONFIG.MMCM_CLKIN2_PERIOD {10.0} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {2.375} \
   CONFIG.MMCM_CLKOUT1_DIVIDE {1} \
   CONFIG.MMCM_CLKOUT2_DIVIDE {1} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.NUM_OUT_CLKS {1} \
   CONFIG.PRIM_IN_FREQ {250} \
   CONFIG.PRIM_SOURCE {Differential_clock_capable_pin} \
   CONFIG.USE_RESET {false} \
 ] $clk_wiz_0

  # Create port connections
  connect_bd_net -net clk_250m_n_1 [get_bd_pins clk_250m_n] [get_bd_pins clk_wiz_0/clk_in1_n]
  connect_bd_net -net clk_250m_p_1 [get_bd_pins clk_250m_p] [get_bd_pins clk_wiz_0/clk_in1_p]
  connect_bd_net -net clk_gen_0_f125m_clk [get_bd_pins f125m_clk] [get_bd_pins clk_gen_0/f125m_clk]
  connect_bd_net -net clk_gen_0_f500m_clk [get_bd_pins f500m_clk] [get_bd_pins clk_gen_0/f500m_clk]
  connect_bd_net -net clk_wiz_0_clk_500m [get_bd_pins clk_gen_0/clk_500m_in] [get_bd_pins clk_wiz_0/clk_500m]
  connect_bd_net -net clk_wiz_0_locked1 [get_bd_pins locked] [get_bd_pins clk_wiz_0/locked]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: spi_7044
proc create_hier_cell_spi_7044 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_spi_7044() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 s_axi_control


  # Create pins
  create_bd_pin -dir I -type clk clk_50m
  create_bd_pin -dir O cs
  create_bd_pin -dir O -from 0 -to 0 rst_7044
  create_bd_pin -dir I -type rst rst_n
  create_bd_pin -dir O sck
  create_bd_pin -dir IO sdio

  # Create instance: gnd, and set properties
  set gnd [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 gnd ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $gnd

  # Create instance: gpio_7044_rst, and set properties
  set gpio_7044_rst [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_7044_rst ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_DOUT_DEFAULT {0x00000001} \
   CONFIG.C_GPIO_WIDTH {1} \
 ] $gpio_7044_rst

  # Create instance: spi_0, and set properties
  set spi_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:spi:1.0 spi_0 ]
  set_property -dict [ list \
   CONFIG.mode {3 Wire} \
 ] $spi_0

  # Create instance: spi_regs_0, and set properties
  set spi_regs_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:spi_regs:1.0 spi_regs_0 ]

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {16} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins s_axi_control] [get_bd_intf_pins spi_regs_0/s_axi_control]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins S_AXI] [get_bd_intf_pins gpio_7044_rst/S_AXI]
  connect_bd_intf_net -intf_net spi_0_m_axis [get_bd_intf_pins spi_0/m_axis] [get_bd_intf_pins spi_regs_0/is_r]
  connect_bd_intf_net -intf_net spi_regs_0_os [get_bd_intf_pins spi_0/s_axis] [get_bd_intf_pins spi_regs_0/os]

  # Create port connections
  connect_bd_net -net Net [get_bd_pins sdio] [get_bd_pins spi_0/sdio]
  connect_bd_net -net clk_0_1 [get_bd_pins clk_50m] [get_bd_pins gpio_7044_rst/s_axi_aclk] [get_bd_pins spi_0/clk] [get_bd_pins spi_regs_0/ap_clk]
  connect_bd_net -net gnd_dout [get_bd_pins gnd/dout] [get_bd_pins spi_regs_0/batch_en]
  connect_bd_net -net gpio_7044_rst_gpio_io_o [get_bd_pins rst_7044] [get_bd_pins gpio_7044_rst/gpio_io_o]
  connect_bd_net -net rst_n_1 [get_bd_pins rst_n] [get_bd_pins gpio_7044_rst/s_axi_aresetn] [get_bd_pins spi_0/rst_n] [get_bd_pins spi_regs_0/ap_rst_n]
  connect_bd_net -net spi_0_cs [get_bd_pins cs] [get_bd_pins spi_0/cs]
  connect_bd_net -net spi_0_sck [get_bd_pins sck] [get_bd_pins spi_0/sck]
  connect_bd_net -net spi_0_wr_data_num [get_bd_pins spi_0/wr_data_num] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net spi_regs_0_cpha_out [get_bd_pins spi_0/cpha] [get_bd_pins spi_regs_0/cpha_out]
  connect_bd_net -net spi_regs_0_cpol_out [get_bd_pins spi_0/cpol] [get_bd_pins spi_regs_0/cpol_out]
  connect_bd_net -net spi_regs_0_rd_target_num_out [get_bd_pins spi_0/rd_target_num] [get_bd_pins spi_regs_0/rd_target_num_out]
  connect_bd_net -net spi_regs_0_rd_width_out [get_bd_pins spi_0/rd_width] [get_bd_pins spi_regs_0/rd_width_out]
  connect_bd_net -net spi_regs_0_soft_rst_n_out [get_bd_pins spi_0/soft_rst_n] [get_bd_pins spi_regs_0/soft_rst_n_out]
  connect_bd_net -net spi_regs_0_w_r_mode_out [get_bd_pins spi_0/w_r_mode] [get_bd_pins spi_regs_0/w_r_mode_out]
  connect_bd_net -net spi_regs_0_wr_width_out [get_bd_pins spi_0/wr_width] [get_bd_pins spi_regs_0/wr_width_out]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins spi_regs_0/wr_data_num_in] [get_bd_pins xlslice_0/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: spi_5681_da2
proc create_hier_cell_spi_5681_da2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_spi_5681_da2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 s_axi_control


  # Create pins
  create_bd_pin -dir I -type clk clk_50m
  create_bd_pin -dir O cs
  create_bd_pin -dir I -type rst rst_n
  create_bd_pin -dir O sck
  create_bd_pin -dir IO sdio

  # Create instance: gnd, and set properties
  set gnd [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 gnd ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $gnd

  # Create instance: spi_0, and set properties
  set spi_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:spi:1.0 spi_0 ]
  set_property -dict [ list \
   CONFIG.mode {3 Wire} \
 ] $spi_0

  # Create instance: spi_regs_0, and set properties
  set spi_regs_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:spi_regs:1.0 spi_regs_0 ]

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {16} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins s_axi_control] [get_bd_intf_pins spi_regs_0/s_axi_control]
  connect_bd_intf_net -intf_net spi_0_m_axis [get_bd_intf_pins spi_0/m_axis] [get_bd_intf_pins spi_regs_0/is_r]
  connect_bd_intf_net -intf_net spi_regs_0_os [get_bd_intf_pins spi_0/s_axis] [get_bd_intf_pins spi_regs_0/os]

  # Create port connections
  connect_bd_net -net Net [get_bd_pins sdio] [get_bd_pins spi_0/sdio]
  connect_bd_net -net clk_0_1 [get_bd_pins clk_50m] [get_bd_pins spi_0/clk] [get_bd_pins spi_regs_0/ap_clk]
  connect_bd_net -net gnd_dout [get_bd_pins gnd/dout] [get_bd_pins spi_regs_0/batch_en]
  connect_bd_net -net rst_n_1 [get_bd_pins rst_n] [get_bd_pins spi_0/rst_n] [get_bd_pins spi_regs_0/ap_rst_n]
  connect_bd_net -net spi_0_cs [get_bd_pins cs] [get_bd_pins spi_0/cs]
  connect_bd_net -net spi_0_sck [get_bd_pins sck] [get_bd_pins spi_0/sck]
  connect_bd_net -net spi_0_wr_data_num [get_bd_pins spi_0/wr_data_num] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net spi_regs_0_cpha_out [get_bd_pins spi_0/cpha] [get_bd_pins spi_regs_0/cpha_out]
  connect_bd_net -net spi_regs_0_cpol_out [get_bd_pins spi_0/cpol] [get_bd_pins spi_regs_0/cpol_out]
  connect_bd_net -net spi_regs_0_rd_target_num_out [get_bd_pins spi_0/rd_target_num] [get_bd_pins spi_regs_0/rd_target_num_out]
  connect_bd_net -net spi_regs_0_rd_width_out [get_bd_pins spi_0/rd_width] [get_bd_pins spi_regs_0/rd_width_out]
  connect_bd_net -net spi_regs_0_soft_rst_n_out [get_bd_pins spi_0/soft_rst_n] [get_bd_pins spi_regs_0/soft_rst_n_out]
  connect_bd_net -net spi_regs_0_w_r_mode_out [get_bd_pins spi_0/w_r_mode] [get_bd_pins spi_regs_0/w_r_mode_out]
  connect_bd_net -net spi_regs_0_wr_width_out [get_bd_pins spi_0/wr_width] [get_bd_pins spi_regs_0/wr_width_out]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins spi_regs_0/wr_data_num_in] [get_bd_pins xlslice_0/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: spi_5681_da1
proc create_hier_cell_spi_5681_da1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_spi_5681_da1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 s_axi_control


  # Create pins
  create_bd_pin -dir I -type clk clk_50m
  create_bd_pin -dir O cs
  create_bd_pin -dir I -type rst rst_n
  create_bd_pin -dir O sck
  create_bd_pin -dir IO sdio

  # Create instance: gnd, and set properties
  set gnd [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 gnd ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $gnd

  # Create instance: spi_0, and set properties
  set spi_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:spi:1.0 spi_0 ]
  set_property -dict [ list \
   CONFIG.mode {3 Wire} \
 ] $spi_0

  # Create instance: spi_regs_0, and set properties
  set spi_regs_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:spi_regs:1.0 spi_regs_0 ]

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {16} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins s_axi_control] [get_bd_intf_pins spi_regs_0/s_axi_control]
  connect_bd_intf_net -intf_net spi_0_m_axis [get_bd_intf_pins spi_0/m_axis] [get_bd_intf_pins spi_regs_0/is_r]
  connect_bd_intf_net -intf_net spi_regs_0_os [get_bd_intf_pins spi_0/s_axis] [get_bd_intf_pins spi_regs_0/os]

  # Create port connections
  connect_bd_net -net Net [get_bd_pins sdio] [get_bd_pins spi_0/sdio]
  connect_bd_net -net clk_0_1 [get_bd_pins clk_50m] [get_bd_pins spi_0/clk] [get_bd_pins spi_regs_0/ap_clk]
  connect_bd_net -net gnd_dout [get_bd_pins gnd/dout] [get_bd_pins spi_regs_0/batch_en]
  connect_bd_net -net rst_n_1 [get_bd_pins rst_n] [get_bd_pins spi_0/rst_n] [get_bd_pins spi_regs_0/ap_rst_n]
  connect_bd_net -net spi_0_cs [get_bd_pins cs] [get_bd_pins spi_0/cs]
  connect_bd_net -net spi_0_sck [get_bd_pins sck] [get_bd_pins spi_0/sck]
  connect_bd_net -net spi_0_wr_data_num [get_bd_pins spi_0/wr_data_num] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net spi_regs_0_cpha_out [get_bd_pins spi_0/cpha] [get_bd_pins spi_regs_0/cpha_out]
  connect_bd_net -net spi_regs_0_cpol_out [get_bd_pins spi_0/cpol] [get_bd_pins spi_regs_0/cpol_out]
  connect_bd_net -net spi_regs_0_rd_target_num_out [get_bd_pins spi_0/rd_target_num] [get_bd_pins spi_regs_0/rd_target_num_out]
  connect_bd_net -net spi_regs_0_rd_width_out [get_bd_pins spi_0/rd_width] [get_bd_pins spi_regs_0/rd_width_out]
  connect_bd_net -net spi_regs_0_soft_rst_n_out [get_bd_pins spi_0/soft_rst_n] [get_bd_pins spi_regs_0/soft_rst_n_out]
  connect_bd_net -net spi_regs_0_w_r_mode_out [get_bd_pins spi_0/w_r_mode] [get_bd_pins spi_regs_0/w_r_mode_out]
  connect_bd_net -net spi_regs_0_wr_width_out [get_bd_pins spi_0/wr_width] [get_bd_pins spi_regs_0/wr_width_out]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins spi_regs_0/wr_data_num_in] [get_bd_pins xlslice_0/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: dac5681
proc create_hier_cell_dac5681 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_dac5681() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI0

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI3

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI4

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI5

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI6

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI7

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI8

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI9


  # Create pins
  create_bd_pin -dir I -type clk clk_250m_n
  create_bd_pin -dir I -type clk clk_250m_p
  create_bd_pin -dir O -from 15 -to 0 dac1_data_n
  create_bd_pin -dir O -from 15 -to 0 dac1_data_p
  create_bd_pin -dir O dac1_dclk_n
  create_bd_pin -dir O dac1_dclk_p
  create_bd_pin -dir O dac1_sync_n
  create_bd_pin -dir O dac1_sync_p
  create_bd_pin -dir O -from 15 -to 0 dac2_data_n
  create_bd_pin -dir O -from 15 -to 0 dac2_data_p
  create_bd_pin -dir O dac2_dclk_n
  create_bd_pin -dir O dac2_dclk_p
  create_bd_pin -dir O dac2_sync_n
  create_bd_pin -dir O dac2_sync_p
  create_bd_pin -dir O -type clk f125m_clk
  create_bd_pin -dir O locked

  # Create instance: clk
  create_hier_cell_clk $hier_obj clk

  # Create instance: ctrl_dac1
  create_hier_cell_ctrl_dac1 $hier_obj ctrl_dac1

  # Create instance: ctrl_dac2
  create_hier_cell_ctrl_dac2 $hier_obj ctrl_dac2

  # Create instance: lvds_out_0, and set properties
  set block_name lvds_out
  set block_cell_name lvds_out_0
  if { [catch {set lvds_out_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $lvds_out_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI2] [get_bd_intf_pins ctrl_dac1/S_AXI3]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins S_AXI1] [get_bd_intf_pins ctrl_dac1/S_AXI1]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins S_AXI4] [get_bd_intf_pins ctrl_dac1/S_AXI4]
  connect_bd_intf_net -intf_net Conn6 [get_bd_intf_pins S_AXI3] [get_bd_intf_pins ctrl_dac1/S_AXI2]
  connect_bd_intf_net -intf_net Conn8 [get_bd_intf_pins S_AXI0] [get_bd_intf_pins ctrl_dac1/S_AXI]
  connect_bd_intf_net -intf_net S_AXI5_1 [get_bd_intf_pins S_AXI5] [get_bd_intf_pins ctrl_dac2/S_AXI]
  connect_bd_intf_net -intf_net S_AXI6_1 [get_bd_intf_pins S_AXI6] [get_bd_intf_pins ctrl_dac2/S_AXI1]
  connect_bd_intf_net -intf_net S_AXI7_1 [get_bd_intf_pins S_AXI7] [get_bd_intf_pins ctrl_dac2/S_AXI2]
  connect_bd_intf_net -intf_net S_AXI8_1 [get_bd_intf_pins S_AXI8] [get_bd_intf_pins ctrl_dac2/S_AXI3]
  connect_bd_intf_net -intf_net S_AXI9_1 [get_bd_intf_pins S_AXI9] [get_bd_intf_pins ctrl_dac2/S_AXI4]

  # Create port connections
  connect_bd_net -net clk_250m_n_1 [get_bd_pins clk_250m_n] [get_bd_pins clk/clk_250m_n]
  connect_bd_net -net clk_250m_p_1 [get_bd_pins clk_250m_p] [get_bd_pins clk/clk_250m_p]
  connect_bd_net -net clk_gen_0_f125m_clk [get_bd_pins f125m_clk] [get_bd_pins clk/f125m_clk] [get_bd_pins ctrl_dac1/f125m_clk] [get_bd_pins ctrl_dac2/f125m_clk] [get_bd_pins lvds_out_0/clk_125m]
  connect_bd_net -net clk_gen_0_f500m_clk [get_bd_pins clk/f500m_clk] [get_bd_pins lvds_out_0/clk_500m]
  connect_bd_net -net clk_wiz_0_locked1 [get_bd_pins locked] [get_bd_pins clk/locked] [get_bd_pins ctrl_dac1/locked] [get_bd_pins ctrl_dac2/locked] [get_bd_pins lvds_out_0/rst_n]
  connect_bd_net -net ctrl_dac1_data_en [get_bd_pins ctrl_dac1/data_en] [get_bd_pins lvds_out_0/data_en_1]
  connect_bd_net -net ctrl_dac1_dclk_en [get_bd_pins ctrl_dac1/dclk_en] [get_bd_pins lvds_out_0/dclk_en_1]
  connect_bd_net -net ctrl_dac1_dds_data [get_bd_pins ctrl_dac1/dds_data] [get_bd_pins lvds_out_0/dds1_in]
  connect_bd_net -net ctrl_dac1_delay [get_bd_pins ctrl_dac1/delay] [get_bd_pins lvds_out_0/delay_value_1]
  connect_bd_net -net ctrl_dac1_delay_load [get_bd_pins ctrl_dac1/delay_load] [get_bd_pins lvds_out_0/delay_load_1]
  connect_bd_net -net ctrl_dac1_delay_vtc [get_bd_pins ctrl_dac1/delay_vtc] [get_bd_pins lvds_out_0/delay_vtc_1]
  connect_bd_net -net ctrl_dac1_sync_data [get_bd_pins ctrl_dac1/sync_data] [get_bd_pins lvds_out_0/sync1_data]
  connect_bd_net -net ctrl_dac1_sync_en [get_bd_pins ctrl_dac1/sync_en] [get_bd_pins lvds_out_0/sync_en_1]
  connect_bd_net -net ctrl_dac2_data_en [get_bd_pins ctrl_dac2/data_en] [get_bd_pins lvds_out_0/data_en_2]
  connect_bd_net -net ctrl_dac2_dclk_en [get_bd_pins ctrl_dac2/dclk_en] [get_bd_pins lvds_out_0/dclk_en_2]
  connect_bd_net -net ctrl_dac2_dds_data [get_bd_pins ctrl_dac2/dds_data] [get_bd_pins lvds_out_0/dds2_in]
  connect_bd_net -net ctrl_dac2_delay [get_bd_pins ctrl_dac2/delay] [get_bd_pins lvds_out_0/delay_value_2]
  connect_bd_net -net ctrl_dac2_delay_load [get_bd_pins ctrl_dac2/delay_load] [get_bd_pins lvds_out_0/delay_load_2]
  connect_bd_net -net ctrl_dac2_delay_vtc [get_bd_pins ctrl_dac2/delay_vtc] [get_bd_pins lvds_out_0/delay_vtc_2]
  connect_bd_net -net ctrl_dac2_sync_data [get_bd_pins ctrl_dac2/sync_data] [get_bd_pins lvds_out_0/sync2_data]
  connect_bd_net -net ctrl_dac2_sync_en [get_bd_pins ctrl_dac2/sync_en] [get_bd_pins lvds_out_0/sync_en_2]
  connect_bd_net -net lvds_out_0_dac1_data_n [get_bd_pins dac1_data_n] [get_bd_pins lvds_out_0/dac1_data_n]
  connect_bd_net -net lvds_out_0_dac1_data_p [get_bd_pins dac1_data_p] [get_bd_pins lvds_out_0/dac1_data_p]
  connect_bd_net -net lvds_out_0_dac1_dclk_n [get_bd_pins ctrl_dac1/delay_monitor] [get_bd_pins lvds_out_0/delay_result_1]
  connect_bd_net -net lvds_out_0_dac1_dclk_n1 [get_bd_pins dac1_dclk_n] [get_bd_pins lvds_out_0/dac1_dclk_n]
  connect_bd_net -net lvds_out_0_dac1_dclk_p [get_bd_pins dac1_dclk_p] [get_bd_pins lvds_out_0/dac1_dclk_p]
  connect_bd_net -net lvds_out_0_dac1_sync_n [get_bd_pins dac1_sync_n] [get_bd_pins lvds_out_0/dac1_sync_n]
  connect_bd_net -net lvds_out_0_dac1_sync_p [get_bd_pins dac1_sync_p] [get_bd_pins lvds_out_0/dac1_sync_p]
  connect_bd_net -net lvds_out_0_dac2_data_n [get_bd_pins dac2_data_n] [get_bd_pins lvds_out_0/dac2_data_n]
  connect_bd_net -net lvds_out_0_dac2_data_p [get_bd_pins dac2_data_p] [get_bd_pins lvds_out_0/dac2_data_p]
  connect_bd_net -net lvds_out_0_dac2_dclk_n [get_bd_pins dac2_dclk_n] [get_bd_pins lvds_out_0/dac2_dclk_n]
  connect_bd_net -net lvds_out_0_dac2_dclk_p [get_bd_pins dac2_dclk_p] [get_bd_pins lvds_out_0/dac2_dclk_p]
  connect_bd_net -net lvds_out_0_dac2_sync_n [get_bd_pins dac2_sync_n] [get_bd_pins lvds_out_0/dac2_sync_n]
  connect_bd_net -net lvds_out_0_dac2_sync_p [get_bd_pins dac2_sync_p] [get_bd_pins lvds_out_0/dac2_sync_p]
  connect_bd_net -net lvds_out_0_delay_rd [get_bd_pins ctrl_dac1/delay_rd] [get_bd_pins ctrl_dac2/delay_rd] [get_bd_pins lvds_out_0/delay_rd]
  connect_bd_net -net lvds_out_0_delay_result_2 [get_bd_pins ctrl_dac2/delay_monitor] [get_bd_pins lvds_out_0/delay_result_2]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set clk_250m_n [ create_bd_port -dir I -type clk -freq_hz 250000000 clk_250m_n ]
  set clk_250m_p [ create_bd_port -dir I -type clk -freq_hz 250000000 clk_250m_p ]
  set cs_5681_1 [ create_bd_port -dir O cs_5681_1 ]
  set cs_5681_2 [ create_bd_port -dir O cs_5681_2 ]
  set cs_7044 [ create_bd_port -dir O cs_7044 ]
  set dac1_data_n [ create_bd_port -dir O -from 15 -to 0 dac1_data_n ]
  set dac1_data_p [ create_bd_port -dir O -from 15 -to 0 dac1_data_p ]
  set dac1_dclk_n [ create_bd_port -dir O dac1_dclk_n ]
  set dac1_dclk_p [ create_bd_port -dir O dac1_dclk_p ]
  set dac1_reset [ create_bd_port -dir O -from 0 -to 0 dac1_reset ]
  set dac1_sync_n [ create_bd_port -dir O dac1_sync_n ]
  set dac1_sync_p [ create_bd_port -dir O dac1_sync_p ]
  set dac2_data_n [ create_bd_port -dir O -from 15 -to 0 dac2_data_n ]
  set dac2_data_p [ create_bd_port -dir O -from 15 -to 0 dac2_data_p ]
  set dac2_dclk_n [ create_bd_port -dir O dac2_dclk_n ]
  set dac2_dclk_p [ create_bd_port -dir O dac2_dclk_p ]
  set dac2_reset [ create_bd_port -dir O -from 0 -to 0 dac2_reset ]
  set dac2_sync_n [ create_bd_port -dir O dac2_sync_n ]
  set dac2_sync_p [ create_bd_port -dir O dac2_sync_p ]
  set dir [ create_bd_port -dir O -from 0 -to 0 dir ]
  set rst_7044 [ create_bd_port -dir O -from 0 -to 0 rst_7044 ]
  set sck_5681_1 [ create_bd_port -dir O sck_5681_1 ]
  set sck_5681_2 [ create_bd_port -dir O sck_5681_2 ]
  set sck_7044 [ create_bd_port -dir O sck_7044 ]
  set sdio_5681_1 [ create_bd_port -dir IO sdio_5681_1 ]
  set sdio_5681_2 [ create_bd_port -dir IO sdio_5681_2 ]
  set sdio_7044 [ create_bd_port -dir IO sdio_7044 ]

  # Create instance: axi_interconnect_0, and set properties
  set axi_interconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_0 ]
  set_property -dict [ list \
   CONFIG.NUM_MI {15} \
 ] $axi_interconnect_0

  # Create instance: dac5681
  create_hier_cell_dac5681 [current_bd_instance .] dac5681

  # Create instance: gpio_dac_rst, and set properties
  set gpio_dac_rst [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_dac_rst ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_ALL_OUTPUTS_2 {1} \
   CONFIG.C_DOUT_DEFAULT {0x00000000} \
   CONFIG.C_DOUT_DEFAULT_2 {0x00000000} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_IS_DUAL {1} \
 ] $gpio_dac_rst

  # Create instance: rst_ps8_0_50M, and set properties
  set rst_ps8_0_50M [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 rst_ps8_0_50M ]

  # Create instance: spi_5681_da1
  create_hier_cell_spi_5681_da1 [current_bd_instance .] spi_5681_da1

  # Create instance: spi_5681_da2
  create_hier_cell_spi_5681_da2 [current_bd_instance .] spi_5681_da2

  # Create instance: spi_7044
  create_hier_cell_spi_7044 [current_bd_instance .] spi_7044

  # Create instance: vcc, and set properties
  set vcc [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 vcc ]

  # Create instance: zynq_ultra_ps_e_0, and set properties
  set zynq_ultra_ps_e_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:zynq_ultra_ps_e:3.4 zynq_ultra_ps_e_0 ]
  set_property -dict [ list \
   CONFIG.PSU_DDR_RAM_HIGHADDR {0x7FFFFFFF} \
   CONFIG.PSU_DDR_RAM_HIGHADDR_OFFSET {0x00000002} \
   CONFIG.PSU_DDR_RAM_LOWADDR_OFFSET {0x80000000} \
   CONFIG.PSU__ACT_DDR_FREQ_MHZ {800.000000} \
   CONFIG.PSU__CRF_APB__ACPU_CTRL__ACT_FREQMHZ {1316.666626} \
   CONFIG.PSU__CRF_APB__ACPU_CTRL__DIVISOR0 {1} \
   CONFIG.PSU__CRF_APB__APLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRF_APB__APLL_CTRL__FBDIV {79} \
   CONFIG.PSU__CRF_APB__APLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRF_APB__APLL_TO_LPD_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRF_APB__DBG_FPD_CTRL__ACT_FREQMHZ {249.999985} \
   CONFIG.PSU__CRF_APB__DBG_FPD_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__DBG_TRACE_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRF_APB__DBG_TSTMP_CTRL__ACT_FREQMHZ {249.999985} \
   CONFIG.PSU__CRF_APB__DBG_TSTMP_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__DDR_CTRL__ACT_FREQMHZ {400.000000} \
   CONFIG.PSU__CRF_APB__DDR_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRF_APB__DPDMA_REF_CTRL__ACT_FREQMHZ {600.000000} \
   CONFIG.PSU__CRF_APB__DPDMA_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__DPLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRF_APB__DPLL_CTRL__FBDIV {72} \
   CONFIG.PSU__CRF_APB__DPLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRF_APB__DPLL_TO_LPD_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRF_APB__DP_AUDIO_REF_CTRL__DIVISOR0 {63} \
   CONFIG.PSU__CRF_APB__DP_AUDIO_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRF_APB__DP_STC_REF_CTRL__DIVISOR0 {6} \
   CONFIG.PSU__CRF_APB__DP_STC_REF_CTRL__DIVISOR1 {10} \
   CONFIG.PSU__CRF_APB__DP_VIDEO_REF_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRF_APB__DP_VIDEO_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRF_APB__GDMA_REF_CTRL__ACT_FREQMHZ {600.000000} \
   CONFIG.PSU__CRF_APB__GDMA_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__GPU_REF_CTRL__ACT_FREQMHZ {600.000000} \
   CONFIG.PSU__CRF_APB__GPU_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__PCIE_REF_CTRL__DIVISOR0 {6} \
   CONFIG.PSU__CRF_APB__SATA_REF_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRF_APB__TOPSW_LSBUS_CTRL__ACT_FREQMHZ {99.999992} \
   CONFIG.PSU__CRF_APB__TOPSW_LSBUS_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRF_APB__TOPSW_MAIN_CTRL__ACT_FREQMHZ {525.000000} \
   CONFIG.PSU__CRF_APB__TOPSW_MAIN_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__VPLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRF_APB__VPLL_CTRL__FBDIV {63} \
   CONFIG.PSU__CRF_APB__VPLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRF_APB__VPLL_TO_LPD_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__ADMA_REF_CTRL__ACT_FREQMHZ {525.000000} \
   CONFIG.PSU__CRL_APB__ADMA_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__AFI6_REF_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRL_APB__AMS_REF_CTRL__ACT_FREQMHZ {49.999996} \
   CONFIG.PSU__CRL_APB__AMS_REF_CTRL__DIVISOR0 {20} \
   CONFIG.PSU__CRL_APB__AMS_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__CAN0_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__CAN0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__CAN1_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__CAN1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__CPU_R5_CTRL__ACT_FREQMHZ {525.000000} \
   CONFIG.PSU__CRL_APB__CPU_R5_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__DBG_LPD_CTRL__ACT_FREQMHZ {249.999985} \
   CONFIG.PSU__CRL_APB__DBG_LPD_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__DLL_REF_CTRL__ACT_FREQMHZ {999.999939} \
   CONFIG.PSU__CRL_APB__GEM0_REF_CTRL__DIVISOR0 {12} \
   CONFIG.PSU__CRL_APB__GEM0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__GEM1_REF_CTRL__DIVISOR0 {12} \
   CONFIG.PSU__CRL_APB__GEM1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__GEM2_REF_CTRL__DIVISOR0 {12} \
   CONFIG.PSU__CRL_APB__GEM2_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__GEM3_REF_CTRL__DIVISOR0 {12} \
   CONFIG.PSU__CRL_APB__GEM3_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__GEM_TSU_REF_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__GEM_TSU_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__I2C0_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__I2C0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__I2C1_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__I2C1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__IOPLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRL_APB__IOPLL_CTRL__FBDIV {60} \
   CONFIG.PSU__CRL_APB__IOPLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRL_APB__IOPLL_TO_FPD_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__IOU_SWITCH_CTRL__ACT_FREQMHZ {262.500000} \
   CONFIG.PSU__CRL_APB__IOU_SWITCH_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__LPD_LSBUS_CTRL__ACT_FREQMHZ {99.999992} \
   CONFIG.PSU__CRL_APB__LPD_LSBUS_CTRL__DIVISOR0 {10} \
   CONFIG.PSU__CRL_APB__LPD_SWITCH_CTRL__ACT_FREQMHZ {525.000000} \
   CONFIG.PSU__CRL_APB__LPD_SWITCH_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__NAND_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__NAND_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__PCAP_CTRL__ACT_FREQMHZ {199.999985} \
   CONFIG.PSU__CRL_APB__PCAP_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRL_APB__PL0_REF_CTRL__ACT_FREQMHZ {50.000000} \
   CONFIG.PSU__CRL_APB__PL0_REF_CTRL__DIVISOR0 {21} \
   CONFIG.PSU__CRL_APB__PL0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__PL0_REF_CTRL__FREQMHZ {50} \
   CONFIG.PSU__CRL_APB__PL1_REF_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__PL1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__PL2_REF_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__PL2_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__PL3_REF_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__PL3_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__QSPI_REF_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRL_APB__QSPI_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__RPLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRL_APB__RPLL_CTRL__FBDIV {63} \
   CONFIG.PSU__CRL_APB__RPLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRL_APB__RPLL_TO_FPD_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__SDIO0_REF_CTRL__DIVISOR0 {7} \
   CONFIG.PSU__CRL_APB__SDIO0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__SDIO1_REF_CTRL__DIVISOR0 {7} \
   CONFIG.PSU__CRL_APB__SDIO1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__SPI0_REF_CTRL__DIVISOR0 {7} \
   CONFIG.PSU__CRL_APB__SPI0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__SPI1_REF_CTRL__DIVISOR0 {7} \
   CONFIG.PSU__CRL_APB__SPI1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__TIMESTAMP_REF_CTRL__ACT_FREQMHZ {33.333332} \
   CONFIG.PSU__CRL_APB__TIMESTAMP_REF_CTRL__DIVISOR0 {1} \
   CONFIG.PSU__CRL_APB__UART0_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__UART0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__UART1_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__UART1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__USB0_BUS_REF_CTRL__DIVISOR0 {6} \
   CONFIG.PSU__CRL_APB__USB0_BUS_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__USB1_BUS_REF_CTRL__DIVISOR0 {6} \
   CONFIG.PSU__CRL_APB__USB1_BUS_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__USB3_DUAL_REF_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRL_APB__USB3_DUAL_REF_CTRL__DIVISOR1 {15} \
   CONFIG.PSU__DDR_HIGH_ADDRESS_GUI_ENABLE {0} \
   CONFIG.PSU__HIGH_ADDRESS__ENABLE {0} \
   CONFIG.PSU__PROTECTION__MASTERS {\
USB1:NonSecure;0|USB0:NonSecure;0|S_AXI_LPD:NA;0|S_AXI_HPC1_FPD:NA;0|S_AXI_HPC0_FPD:NA;0|S_AXI_HP3_FPD:NA;0|S_AXI_HP2_FPD:NA;0|S_AXI_HP1_FPD:NA;0|S_AXI_HP0_FPD:NA;0|S_AXI_ACP:NA;0|S_AXI_ACE:NA;0|SD1:NonSecure;0|SD0:NonSecure;0|SATA1:NonSecure;0|SATA0:NonSecure;0|RPU1:Secure;1|RPU0:Secure;1|QSPI:NonSecure;0|PMU:NA;1|PCIe:NonSecure;0|NAND:NonSecure;0|LDMA:NonSecure;1|GPU:NonSecure;1|GEM3:NonSecure;0|GEM2:NonSecure;0|GEM1:NonSecure;0|GEM0:NonSecure;0|FDMA:NonSecure;1|DP:NonSecure;0|DAP:NA;1|Coresight:NA;1|CSU:NA;1|APU:NA;1} \
   CONFIG.PSU__PROTECTION__SLAVES {\
LPD;USB3_1_XHCI;FE300000;FE3FFFFF;0|LPD;USB3_1;FF9E0000;FF9EFFFF;0|LPD;USB3_0_XHCI;FE200000;FE2FFFFF;0|LPD;USB3_0;FF9D0000;FF9DFFFF;0|LPD;UART1;FF010000;FF01FFFF;0|LPD;UART0;FF000000;FF00FFFF;0|LPD;TTC3;FF140000;FF14FFFF;0|LPD;TTC2;FF130000;FF13FFFF;0|LPD;TTC1;FF120000;FF12FFFF;0|LPD;TTC0;FF110000;FF11FFFF;0|FPD;SWDT1;FD4D0000;FD4DFFFF;0|LPD;SWDT0;FF150000;FF15FFFF;0|LPD;SPI1;FF050000;FF05FFFF;0|LPD;SPI0;FF040000;FF04FFFF;0|FPD;SMMU_REG;FD5F0000;FD5FFFFF;1|FPD;SMMU;FD800000;FDFFFFFF;1|FPD;SIOU;FD3D0000;FD3DFFFF;1|FPD;SERDES;FD400000;FD47FFFF;1|LPD;SD1;FF170000;FF17FFFF;0|LPD;SD0;FF160000;FF16FFFF;0|FPD;SATA;FD0C0000;FD0CFFFF;0|LPD;RTC;FFA60000;FFA6FFFF;1|LPD;RSA_CORE;FFCE0000;FFCEFFFF;1|LPD;RPU;FF9A0000;FF9AFFFF;1|LPD;R5_TCM_RAM_GLOBAL;FFE00000;FFE3FFFF;1|LPD;R5_1_Instruction_Cache;FFEC0000;FFECFFFF;1|LPD;R5_1_Data_Cache;FFED0000;FFEDFFFF;1|LPD;R5_1_BTCM_GLOBAL;FFEB0000;FFEBFFFF;1|LPD;R5_1_ATCM_GLOBAL;FFE90000;FFE9FFFF;1|LPD;R5_0_Instruction_Cache;FFE40000;FFE4FFFF;1|LPD;R5_0_Data_Cache;FFE50000;FFE5FFFF;1|LPD;R5_0_BTCM_GLOBAL;FFE20000;FFE2FFFF;1|LPD;R5_0_ATCM_GLOBAL;FFE00000;FFE0FFFF;1|LPD;QSPI_Linear_Address;C0000000;DFFFFFFF;1|LPD;QSPI;FF0F0000;FF0FFFFF;0|LPD;PMU_RAM;FFDC0000;FFDDFFFF;1|LPD;PMU_GLOBAL;FFD80000;FFDBFFFF;1|FPD;PCIE_MAIN;FD0E0000;FD0EFFFF;0|FPD;PCIE_LOW;E0000000;EFFFFFFF;0|FPD;PCIE_HIGH2;8000000000;BFFFFFFFFF;0|FPD;PCIE_HIGH1;600000000;7FFFFFFFF;0|FPD;PCIE_DMA;FD0F0000;FD0FFFFF;0|FPD;PCIE_ATTRIB;FD480000;FD48FFFF;0|LPD;OCM_XMPU_CFG;FFA70000;FFA7FFFF;1|LPD;OCM_SLCR;FF960000;FF96FFFF;1|OCM;OCM;FFFC0000;FFFFFFFF;1|LPD;NAND;FF100000;FF10FFFF;0|LPD;MBISTJTAG;FFCF0000;FFCFFFFF;1|LPD;LPD_XPPU_SINK;FF9C0000;FF9CFFFF;1|LPD;LPD_XPPU;FF980000;FF98FFFF;1|LPD;LPD_SLCR_SECURE;FF4B0000;FF4DFFFF;1|LPD;LPD_SLCR;FF410000;FF4AFFFF;1|LPD;LPD_GPV;FE100000;FE1FFFFF;1|LPD;LPD_DMA_7;FFAF0000;FFAFFFFF;1|LPD;LPD_DMA_6;FFAE0000;FFAEFFFF;1|LPD;LPD_DMA_5;FFAD0000;FFADFFFF;1|LPD;LPD_DMA_4;FFAC0000;FFACFFFF;1|LPD;LPD_DMA_3;FFAB0000;FFABFFFF;1|LPD;LPD_DMA_2;FFAA0000;FFAAFFFF;1|LPD;LPD_DMA_1;FFA90000;FFA9FFFF;1|LPD;LPD_DMA_0;FFA80000;FFA8FFFF;1|LPD;IPI_CTRL;FF380000;FF3FFFFF;1|LPD;IOU_SLCR;FF180000;FF23FFFF;1|LPD;IOU_SECURE_SLCR;FF240000;FF24FFFF;1|LPD;IOU_SCNTRS;FF260000;FF26FFFF;1|LPD;IOU_SCNTR;FF250000;FF25FFFF;1|LPD;IOU_GPV;FE000000;FE0FFFFF;1|LPD;I2C1;FF030000;FF03FFFF;0|LPD;I2C0;FF020000;FF02FFFF;0|FPD;GPU;FD4B0000;FD4BFFFF;1|LPD;GPIO;FF0A0000;FF0AFFFF;1|LPD;GEM3;FF0E0000;FF0EFFFF;0|LPD;GEM2;FF0D0000;FF0DFFFF;0|LPD;GEM1;FF0C0000;FF0CFFFF;0|LPD;GEM0;FF0B0000;FF0BFFFF;0|FPD;FPD_XMPU_SINK;FD4F0000;FD4FFFFF;1|FPD;FPD_XMPU_CFG;FD5D0000;FD5DFFFF;1|FPD;FPD_SLCR_SECURE;FD690000;FD6CFFFF;1|FPD;FPD_SLCR;FD610000;FD68FFFF;1|FPD;FPD_DMA_CH7;FD570000;FD57FFFF;1|FPD;FPD_DMA_CH6;FD560000;FD56FFFF;1|FPD;FPD_DMA_CH5;FD550000;FD55FFFF;1|FPD;FPD_DMA_CH4;FD540000;FD54FFFF;1|FPD;FPD_DMA_CH3;FD530000;FD53FFFF;1|FPD;FPD_DMA_CH2;FD520000;FD52FFFF;1|FPD;FPD_DMA_CH1;FD510000;FD51FFFF;1|FPD;FPD_DMA_CH0;FD500000;FD50FFFF;1|LPD;EFUSE;FFCC0000;FFCCFFFF;1|FPD;Display\
Port;FD4A0000;FD4AFFFF;0|FPD;DPDMA;FD4C0000;FD4CFFFF;0|FPD;DDR_XMPU5_CFG;FD050000;FD05FFFF;1|FPD;DDR_XMPU4_CFG;FD040000;FD04FFFF;1|FPD;DDR_XMPU3_CFG;FD030000;FD03FFFF;1|FPD;DDR_XMPU2_CFG;FD020000;FD02FFFF;1|FPD;DDR_XMPU1_CFG;FD010000;FD01FFFF;1|FPD;DDR_XMPU0_CFG;FD000000;FD00FFFF;1|FPD;DDR_QOS_CTRL;FD090000;FD09FFFF;1|FPD;DDR_PHY;FD080000;FD08FFFF;1|DDR;DDR_LOW;0;7FFFFFFF;1|DDR;DDR_HIGH;800000000;800000000;0|FPD;DDDR_CTRL;FD070000;FD070FFF;1|LPD;Coresight;FE800000;FEFFFFFF;1|LPD;CSU_DMA;FFC80000;FFC9FFFF;1|LPD;CSU;FFCA0000;FFCAFFFF;1|LPD;CRL_APB;FF5E0000;FF85FFFF;1|FPD;CRF_APB;FD1A0000;FD2DFFFF;1|FPD;CCI_REG;FD5E0000;FD5EFFFF;1|LPD;CAN1;FF070000;FF07FFFF;0|LPD;CAN0;FF060000;FF06FFFF;0|FPD;APU;FD5C0000;FD5CFFFF;1|LPD;APM_INTC_IOU;FFA20000;FFA2FFFF;1|LPD;APM_FPD_LPD;FFA30000;FFA3FFFF;1|FPD;APM_5;FD490000;FD49FFFF;1|FPD;APM_0;FD0B0000;FD0BFFFF;1|LPD;APM2;FFA10000;FFA1FFFF;1|LPD;APM1;FFA00000;FFA0FFFF;1|LPD;AMS;FFA50000;FFA5FFFF;1|FPD;AFI_5;FD3B0000;FD3BFFFF;1|FPD;AFI_4;FD3A0000;FD3AFFFF;1|FPD;AFI_3;FD390000;FD39FFFF;1|FPD;AFI_2;FD380000;FD38FFFF;1|FPD;AFI_1;FD370000;FD37FFFF;1|FPD;AFI_0;FD360000;FD36FFFF;1|LPD;AFIFM6;FF9B0000;FF9BFFFF;1|FPD;ACPU_GIC;F9010000;F907FFFF;1} \
   CONFIG.PSU__PSS_REF_CLK__FREQMHZ {33.333333333} \
 ] $zynq_ultra_ps_e_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins axi_interconnect_0/M00_AXI] [get_bd_intf_pins spi_5681_da1/s_axi_control]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins axi_interconnect_0/M01_AXI] [get_bd_intf_pins spi_5681_da2/s_axi_control]
  connect_bd_intf_net -intf_net axi_interconnect_0_M02_AXI [get_bd_intf_pins axi_interconnect_0/M02_AXI] [get_bd_intf_pins spi_7044/s_axi_control]
  connect_bd_intf_net -intf_net axi_interconnect_0_M03_AXI [get_bd_intf_pins axi_interconnect_0/M03_AXI] [get_bd_intf_pins spi_7044/S_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M04_AXI [get_bd_intf_pins axi_interconnect_0/M04_AXI] [get_bd_intf_pins dac5681/S_AXI3]
  connect_bd_intf_net -intf_net axi_interconnect_0_M05_AXI [get_bd_intf_pins axi_interconnect_0/M05_AXI] [get_bd_intf_pins dac5681/S_AXI0]
  connect_bd_intf_net -intf_net axi_interconnect_0_M06_AXI [get_bd_intf_pins axi_interconnect_0/M06_AXI] [get_bd_intf_pins dac5681/S_AXI1]
  connect_bd_intf_net -intf_net axi_interconnect_0_M07_AXI [get_bd_intf_pins axi_interconnect_0/M07_AXI] [get_bd_intf_pins dac5681/S_AXI4]
  connect_bd_intf_net -intf_net axi_interconnect_0_M08_AXI [get_bd_intf_pins axi_interconnect_0/M08_AXI] [get_bd_intf_pins dac5681/S_AXI2]
  connect_bd_intf_net -intf_net axi_interconnect_0_M09_AXI [get_bd_intf_pins axi_interconnect_0/M09_AXI] [get_bd_intf_pins dac5681/S_AXI8]
  connect_bd_intf_net -intf_net axi_interconnect_0_M10_AXI [get_bd_intf_pins axi_interconnect_0/M10_AXI] [get_bd_intf_pins dac5681/S_AXI5]
  connect_bd_intf_net -intf_net axi_interconnect_0_M11_AXI [get_bd_intf_pins axi_interconnect_0/M11_AXI] [get_bd_intf_pins dac5681/S_AXI6]
  connect_bd_intf_net -intf_net axi_interconnect_0_M12_AXI [get_bd_intf_pins axi_interconnect_0/M12_AXI] [get_bd_intf_pins dac5681/S_AXI9]
  connect_bd_intf_net -intf_net axi_interconnect_0_M13_AXI [get_bd_intf_pins axi_interconnect_0/M13_AXI] [get_bd_intf_pins dac5681/S_AXI7]
  connect_bd_intf_net -intf_net axi_interconnect_0_M14_AXI [get_bd_intf_pins axi_interconnect_0/M14_AXI] [get_bd_intf_pins gpio_dac_rst/S_AXI]
  connect_bd_intf_net -intf_net zynq_ultra_ps_e_0_M_AXI_HPM0_LPD [get_bd_intf_pins axi_interconnect_0/S00_AXI] [get_bd_intf_pins zynq_ultra_ps_e_0/M_AXI_HPM0_LPD]

  # Create port connections
  connect_bd_net -net Net [get_bd_ports sdio_7044] [get_bd_pins spi_7044/sdio]
  connect_bd_net -net Net1 [get_bd_ports sdio_5681_1] [get_bd_pins spi_5681_da1/sdio]
  connect_bd_net -net Net2 [get_bd_ports sdio_5681_2] [get_bd_pins spi_5681_da2/sdio]
  connect_bd_net -net clk_250m_n_1 [get_bd_ports clk_250m_n] [get_bd_pins dac5681/clk_250m_n]
  connect_bd_net -net clk_250m_p_1 [get_bd_ports clk_250m_p] [get_bd_pins dac5681/clk_250m_p]
  connect_bd_net -net clk_gen_0_f125m_clk [get_bd_pins axi_interconnect_0/M04_ACLK] [get_bd_pins axi_interconnect_0/M05_ACLK] [get_bd_pins axi_interconnect_0/M06_ACLK] [get_bd_pins axi_interconnect_0/M07_ACLK] [get_bd_pins axi_interconnect_0/M08_ACLK] [get_bd_pins axi_interconnect_0/M09_ACLK] [get_bd_pins axi_interconnect_0/M10_ACLK] [get_bd_pins axi_interconnect_0/M11_ACLK] [get_bd_pins axi_interconnect_0/M12_ACLK] [get_bd_pins axi_interconnect_0/M13_ACLK] [get_bd_pins dac5681/f125m_clk]
  connect_bd_net -net dac5681_dac1_data_n_0 [get_bd_ports dac1_data_n] [get_bd_pins dac5681/dac1_data_n]
  connect_bd_net -net dac5681_dac1_data_p_0 [get_bd_ports dac1_data_p] [get_bd_pins dac5681/dac1_data_p]
  connect_bd_net -net dac5681_dac1_dclk_n_1 [get_bd_ports dac1_dclk_n] [get_bd_pins dac5681/dac1_dclk_n]
  connect_bd_net -net dac5681_dac1_dclk_p_1 [get_bd_ports dac1_dclk_p] [get_bd_pins dac5681/dac1_dclk_p]
  connect_bd_net -net dac5681_dac1_sync_n_0 [get_bd_ports dac1_sync_n] [get_bd_pins dac5681/dac1_sync_n]
  connect_bd_net -net dac5681_dac1_sync_p_0 [get_bd_ports dac1_sync_p] [get_bd_pins dac5681/dac1_sync_p]
  connect_bd_net -net dac5681_dac2_data_n_0 [get_bd_ports dac2_data_n] [get_bd_pins dac5681/dac2_data_n]
  connect_bd_net -net dac5681_dac2_data_p_0 [get_bd_ports dac2_data_p] [get_bd_pins dac5681/dac2_data_p]
  connect_bd_net -net dac5681_dac2_dclk_n_0 [get_bd_ports dac2_dclk_n] [get_bd_pins dac5681/dac2_dclk_n]
  connect_bd_net -net dac5681_dac2_dclk_p_0 [get_bd_ports dac2_dclk_p] [get_bd_pins dac5681/dac2_dclk_p]
  connect_bd_net -net dac5681_dac2_sync_n_0 [get_bd_ports dac2_sync_n] [get_bd_pins dac5681/dac2_sync_n]
  connect_bd_net -net dac5681_dac2_sync_p_0 [get_bd_ports dac2_sync_p] [get_bd_pins dac5681/dac2_sync_p]
  connect_bd_net -net gpio_adc_rst_gpio2_io_o [get_bd_ports dac2_reset] [get_bd_pins gpio_dac_rst/gpio2_io_o]
  connect_bd_net -net gpio_adc_rst_gpio_io_o [get_bd_ports dac1_reset] [get_bd_pins gpio_dac_rst/gpio_io_o]
  connect_bd_net -net rst_clk_gen_0_125M_peripheral_aresetn1 [get_bd_pins axi_interconnect_0/M04_ARESETN] [get_bd_pins axi_interconnect_0/M05_ARESETN] [get_bd_pins axi_interconnect_0/M06_ARESETN] [get_bd_pins axi_interconnect_0/M07_ARESETN] [get_bd_pins axi_interconnect_0/M08_ARESETN] [get_bd_pins axi_interconnect_0/M09_ARESETN] [get_bd_pins axi_interconnect_0/M10_ARESETN] [get_bd_pins axi_interconnect_0/M11_ARESETN] [get_bd_pins axi_interconnect_0/M12_ARESETN] [get_bd_pins axi_interconnect_0/M13_ARESETN] [get_bd_pins dac5681/locked]
  connect_bd_net -net rst_ps8_0_50M_peripheral_aresetn [get_bd_pins axi_interconnect_0/ARESETN] [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins axi_interconnect_0/M01_ARESETN] [get_bd_pins axi_interconnect_0/M02_ARESETN] [get_bd_pins axi_interconnect_0/M03_ARESETN] [get_bd_pins axi_interconnect_0/M14_ARESETN] [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins gpio_dac_rst/s_axi_aresetn] [get_bd_pins rst_ps8_0_50M/peripheral_aresetn] [get_bd_pins spi_5681_da1/rst_n] [get_bd_pins spi_5681_da2/rst_n] [get_bd_pins spi_7044/rst_n]
  connect_bd_net -net spi_5681_cs [get_bd_ports cs_5681_1] [get_bd_pins spi_5681_da1/cs]
  connect_bd_net -net spi_5681_da2_cs [get_bd_ports cs_5681_2] [get_bd_pins spi_5681_da2/cs]
  connect_bd_net -net spi_5681_da2_sck [get_bd_ports sck_5681_2] [get_bd_pins spi_5681_da2/sck]
  connect_bd_net -net spi_5681_sck [get_bd_ports sck_5681_1] [get_bd_pins spi_5681_da1/sck]
  connect_bd_net -net spi_7044_cs_0 [get_bd_ports cs_7044] [get_bd_pins spi_7044/cs]
  connect_bd_net -net spi_7044_gpio_io_o_0 [get_bd_ports rst_7044] [get_bd_pins spi_7044/rst_7044]
  connect_bd_net -net spi_7044_sck_0 [get_bd_ports sck_7044] [get_bd_pins spi_7044/sck]
  connect_bd_net -net vcc_dout [get_bd_ports dir] [get_bd_pins vcc/dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins axi_interconnect_0/ACLK] [get_bd_pins axi_interconnect_0/M00_ACLK] [get_bd_pins axi_interconnect_0/M01_ACLK] [get_bd_pins axi_interconnect_0/M02_ACLK] [get_bd_pins axi_interconnect_0/M03_ACLK] [get_bd_pins axi_interconnect_0/M14_ACLK] [get_bd_pins axi_interconnect_0/S00_ACLK] [get_bd_pins gpio_dac_rst/s_axi_aclk] [get_bd_pins rst_ps8_0_50M/slowest_sync_clk] [get_bd_pins spi_5681_da1/clk_50m] [get_bd_pins spi_5681_da2/clk_50m] [get_bd_pins spi_7044/clk_50m] [get_bd_pins zynq_ultra_ps_e_0/maxihpm0_lpd_aclk] [get_bd_pins zynq_ultra_ps_e_0/pl_clk0]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_resetn0 [get_bd_pins rst_ps8_0_50M/ext_reset_in] [get_bd_pins zynq_ultra_ps_e_0/pl_resetn0]

  # Create address segments
  assign_bd_address -offset 0x80020000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs spi_7044/gpio_7044_rst/S_AXI/Reg] -force
  assign_bd_address -offset 0x800E0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs gpio_dac_rst/S_AXI/Reg] -force
  assign_bd_address -offset 0x80060000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac1/gpio_data/S_AXI/Reg] -force
  assign_bd_address -offset 0x80090000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac2/gpio_data/S_AXI/Reg] -force
  assign_bd_address -offset 0x80040000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac1/gpio_dds_freq/S_AXI/Reg] -force
  assign_bd_address -offset 0x800A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac2/gpio_dds_freq/S_AXI/Reg] -force
  assign_bd_address -offset 0x80050000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac1/gpio_delay/S_AXI/Reg] -force
  assign_bd_address -offset 0x800B0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac2/gpio_delay/S_AXI/Reg] -force
  assign_bd_address -offset 0x80080000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac1/gpio_en/S_AXI/Reg] -force
  assign_bd_address -offset 0x800C0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac2/gpio_en/S_AXI/Reg] -force
  assign_bd_address -offset 0x80070000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac1/gpio_sync/S_AXI/Reg] -force
  assign_bd_address -offset 0x800D0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs dac5681/ctrl_dac2/gpio_sync/S_AXI/Reg] -force
  assign_bd_address -offset 0x80000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs spi_5681_da1/spi_regs_0/s_axi_control/Reg] -force
  assign_bd_address -offset 0x80010000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs spi_5681_da2/spi_regs_0/s_axi_control/Reg] -force
  assign_bd_address -offset 0x80030000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs spi_7044/spi_regs_0/s_axi_control/Reg] -force

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.554545",
   "Default View_TopLeft":"-644,0",
   "ExpandedHierarchyInLayout":"",
   "PinnedPorts":"",
   "guistr":"# # String gsaved with Nlview 7.0r6  2020-01-29 bk=1.5227 VDI=41 GEI=36 GUI=JA:10.0 non-TLS
#  -string -flagsOSRD
preplace port port-id_clk_250m_n -pg 1 -lvl 0 -x 0 -y 20 -defaultsOSRD
preplace port port-id_clk_250m_p -pg 1 -lvl 0 -x 0 -y 40 -defaultsOSRD
preplace port port-id_cs_5681_1 -pg 1 -lvl 4 -x 1430 -y 850 -defaultsOSRD
preplace port port-id_cs_5681_2 -pg 1 -lvl 4 -x 1430 -y 980 -defaultsOSRD
preplace port port-id_cs_7044 -pg 1 -lvl 4 -x 1430 -y 1110 -defaultsOSRD
preplace port port-id_dac1_dclk_n -pg 1 -lvl 4 -x 1430 -y 350 -defaultsOSRD
preplace port port-id_dac1_dclk_p -pg 1 -lvl 4 -x 1430 -y 370 -defaultsOSRD
preplace port port-id_dac1_sync_n -pg 1 -lvl 4 -x 1430 -y 390 -defaultsOSRD
preplace port port-id_dac1_sync_p -pg 1 -lvl 4 -x 1430 -y 410 -defaultsOSRD
preplace port port-id_dac2_dclk_n -pg 1 -lvl 4 -x 1430 -y 470 -defaultsOSRD
preplace port port-id_dac2_dclk_p -pg 1 -lvl 4 -x 1430 -y 490 -defaultsOSRD
preplace port port-id_dac2_sync_n -pg 1 -lvl 4 -x 1430 -y 510 -defaultsOSRD
preplace port port-id_dac2_sync_p -pg 1 -lvl 4 -x 1430 -y 530 -defaultsOSRD
preplace port port-id_sck_5681_1 -pg 1 -lvl 4 -x 1430 -y 870 -defaultsOSRD
preplace port port-id_sck_5681_2 -pg 1 -lvl 4 -x 1430 -y 1000 -defaultsOSRD
preplace port port-id_sck_7044 -pg 1 -lvl 4 -x 1430 -y 1150 -defaultsOSRD
preplace port port-id_sdio_5681_1 -pg 1 -lvl 4 -x 1430 -y 890 -defaultsOSRD
preplace port port-id_sdio_5681_2 -pg 1 -lvl 4 -x 1430 -y 1020 -defaultsOSRD
preplace port port-id_sdio_7044 -pg 1 -lvl 4 -x 1430 -y 1170 -defaultsOSRD
preplace portBus dac1_data_n -pg 1 -lvl 4 -x 1430 -y 310 -defaultsOSRD
preplace portBus dac1_data_p -pg 1 -lvl 4 -x 1430 -y 330 -defaultsOSRD
preplace portBus dac1_reset -pg 1 -lvl 4 -x 1430 -y 710 -defaultsOSRD
preplace portBus dac2_data_n -pg 1 -lvl 4 -x 1430 -y 430 -defaultsOSRD
preplace portBus dac2_data_p -pg 1 -lvl 4 -x 1430 -y 450 -defaultsOSRD
preplace portBus dac2_reset -pg 1 -lvl 4 -x 1430 -y 750 -defaultsOSRD
preplace portBus dir -pg 1 -lvl 4 -x 1430 -y 1260 -defaultsOSRD
preplace portBus rst_7044 -pg 1 -lvl 4 -x 1430 -y 1130 -defaultsOSRD
preplace inst axi_interconnect_0 -pg 1 -lvl 2 -x 820 -y 450 -defaultsOSRD
preplace inst dac5681 -pg 1 -lvl 3 -x 1260 -y 440 -defaultsOSRD
preplace inst gpio_dac_rst -pg 1 -lvl 3 -x 1260 -y 720 -defaultsOSRD
preplace inst rst_ps8_0_50M -pg 1 -lvl 1 -x 330 -y 330 -defaultsOSRD
preplace inst spi_5681_da1 -pg 1 -lvl 3 -x 1260 -y 870 -defaultsOSRD
preplace inst spi_5681_da2 -pg 1 -lvl 3 -x 1260 -y 1000 -defaultsOSRD
preplace inst spi_7044 -pg 1 -lvl 3 -x 1260 -y 1140 -defaultsOSRD
preplace inst vcc -pg 1 -lvl 3 -x 1260 -y 1260 -defaultsOSRD
preplace inst zynq_ultra_ps_e_0 -pg 1 -lvl 1 -x 330 -y 130 -defaultsOSRD
preplace netloc Net 1 3 1 NJ 1170
preplace netloc Net1 1 3 1 NJ 890
preplace netloc Net2 1 3 1 NJ 1020
preplace netloc clk_250m_n_1 1 0 3 NJ 20 NJ 20 1120J
preplace netloc clk_250m_p_1 1 0 3 NJ 40 630J 30 1110J
preplace netloc clk_gen_0_f125m_clk 1 1 3 660 40 1080J 620 1410
preplace netloc dac5681_dac1_data_n_0 1 3 1 NJ 310
preplace netloc dac5681_dac1_data_p_0 1 3 1 NJ 330
preplace netloc dac5681_dac1_dclk_n_1 1 3 1 NJ 350
preplace netloc dac5681_dac1_dclk_p_1 1 3 1 NJ 370
preplace netloc dac5681_dac1_sync_n_0 1 3 1 NJ 390
preplace netloc dac5681_dac1_sync_p_0 1 3 1 NJ 410
preplace netloc dac5681_dac2_data_n_0 1 3 1 NJ 430
preplace netloc dac5681_dac2_data_p_0 1 3 1 NJ 450
preplace netloc dac5681_dac2_dclk_n_0 1 3 1 NJ 470
preplace netloc dac5681_dac2_dclk_p_0 1 3 1 NJ 490
preplace netloc dac5681_dac2_sync_n_0 1 3 1 NJ 510
preplace netloc dac5681_dac2_sync_p_0 1 3 1 NJ 530
preplace netloc gpio_adc_rst_gpio2_io_o 1 3 1 NJ 750
preplace netloc gpio_adc_rst_gpio_io_o 1 3 1 NJ 710
preplace netloc rst_clk_gen_0_125M_peripheral_aresetn1 1 1 3 670 50 1070J 630 1400
preplace netloc rst_ps8_0_50M_peripheral_aresetn 1 1 2 650 860 1110
preplace netloc spi_5681_cs 1 3 1 NJ 850
preplace netloc spi_5681_da2_cs 1 3 1 NJ 980
preplace netloc spi_5681_da2_sck 1 3 1 NJ 1000
preplace netloc spi_5681_sck 1 3 1 NJ 870
preplace netloc spi_7044_cs_0 1 3 1 NJ 1110
preplace netloc spi_7044_gpio_io_o_0 1 3 1 NJ 1130
preplace netloc spi_7044_sck_0 1 3 1 NJ 1150
preplace netloc vcc_dout 1 3 1 NJ 1260
preplace netloc zynq_ultra_ps_e_0_pl_clk0 1 0 3 20 220 640 850 1020
preplace netloc zynq_ultra_ps_e_0_pl_resetn0 1 0 2 30 230 630
preplace netloc axi_interconnect_0_M00_AXI 1 2 1 1040 310n
preplace netloc axi_interconnect_0_M01_AXI 1 2 1 980 330n
preplace netloc axi_interconnect_0_M02_AXI 1 2 1 970 350n
preplace netloc axi_interconnect_0_M03_AXI 1 2 1 1010 370n
preplace netloc axi_interconnect_0_M04_AXI 1 2 1 N 390
preplace netloc axi_interconnect_0_M05_AXI 1 2 1 990 330n
preplace netloc axi_interconnect_0_M06_AXI 1 2 1 1000 350n
preplace netloc axi_interconnect_0_M07_AXI 1 2 1 1030 410n
preplace netloc axi_interconnect_0_M08_AXI 1 2 1 1020 370n
preplace netloc axi_interconnect_0_M09_AXI 1 2 1 N 490
preplace netloc axi_interconnect_0_M10_AXI 1 2 1 1050 430n
preplace netloc axi_interconnect_0_M11_AXI 1 2 1 1060 450n
preplace netloc axi_interconnect_0_M12_AXI 1 2 1 1100 510n
preplace netloc axi_interconnect_0_M13_AXI 1 2 1 1090 470n
preplace netloc axi_interconnect_0_M14_AXI 1 2 1 1020 590n
preplace netloc zynq_ultra_ps_e_0_M_AXI_HPM0_LPD 1 1 1 N 110
levelinfo -pg 1 0 330 820 1260 1430
pagesize -pg 1 -db -bbox -sgen -130 0 1600 1320
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_design_1()
cr_bd_design_1 ""
set_property REGISTERED_WITH_MANAGER "1" [get_files design_1.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files design_1.bd ] 

#call make_wrapper to create wrapper files
if { [get_property IS_LOCKED [ get_files -norecurse design_1.bd] ] == 1  } {
  import_files -fileset sources_1 [file normalize "${origin_dir}/project/project.gen/sources_1/bd/design_1/hdl/design_1_wrapper.v" ]
} else {
  set wrapper_path [make_wrapper -fileset sources_1 -files [ get_files -norecurse design_1.bd] -top]
  add_files -norecurse -fileset sources_1 $wrapper_path
}


set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xczu19eg-ffvc1760-2-i -flow {Vivado Synthesis 2022} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2022" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "part" -value "xczu19eg-ffvc1760-2-i" -objects $obj
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xczu19eg-ffvc1760-2-i -flow {Vivado Implementation 2022} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2022" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "part" -value "xczu19eg-ffvc1760-2-i" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
